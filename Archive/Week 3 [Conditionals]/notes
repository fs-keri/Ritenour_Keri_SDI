Conditionals
    Basic skeleton for conditional statements
        if(condition){
           actions or code block
           code with in the curly braces should always be indented one tab to the over from the if
        }

    Example:   if(sunny){
                  goToTheBeach();
                }else{
                  goToTheMovies();
                }

    if(){       curly brace should be on same line as if statement
    }


Relational Operators

    Greater than >
    Less than    <
    Greater than or equal to >=
    Less than or equal to    <=

    The purpose of relational operators is to compare
    two (and only two) values or variables.

    The comparison results in TRUE or FALSE.

    With the result, the computer can make a decision like the
    if statements we have been talking about.


Equality Operators

    Equality ==  (allows you to compare two values and see if they are holding the same amount)
    Strict Equality ===  (used not only when you want to compare the value of two objects, but their type as well)
    Inequality !=

    They also compare two objects and come up with a true or
    false, like the relational operators.

    (not be using in this class. It is not the best way to get
    things done in JavaScript)


    var a =12;
    a > 20  FALSE

    Symbols should never be broken such as < =, they must be
    together as <=.

    5 < 5 FALSE
    5 <= 5 TRUE

    a==b (is a the same as b)
    a=b (changes the value of a)

    6 Number
    "6" String
    6 == "6" TRUE
    6 === "6" FALSE (because one is a number and one is a string)
    (checks to see if these are two strings or are they two numbers)


    BEST PRACTICE USE STRICT EQUALITY OVER EQUALITY
    === IS BETTER THAN ==
    It is more efficient

    Inequality -- uses the != operator

        to evaluate if two objects are different (is not the same)
        Do this task only if a!=b TRUE


Logical Operators
    sometimes we need to combine conditions to make code more manageable and reusable
    we use logical operators to combine pairs of trues and falses into one big TRUE or FALSE
    You are only going to put logical operators between boolean variables or comparisons

    And    &&    -requires both in the pair to be TRUE for the whole pair to be TRUE
        Truth Table:
            TRUE && TRUE     TRUE
            TRUE && FALSE    FALSE
            FALSE && TRUE    FALSE
            FALSE && FALSE   FALSE


    Or     ||   --means that the entire pair is true as long as one or more numbers is true
         Truth Table:
            TRUE || TRUE     TRUE
            TRUE || FALSE    TRUE
            FALSE || TRUE    TRUE
            FALSE || FALSE   FALSE


    Exclusive OR (XOR)  ^  --means that only one of the pair can be true for the entire statement to be true
        Truth Table:
            TRUE ^ TRUE    FALSE
            FALSE ^ FALSE  FALSE
            TRUE ^ FALSE   TRUE
            FALSE ^ TRUE   TRUE


    Not  !   --used to flip the meaning of an object and is also called negation
        Flips a value so
            TRUE becomes FALSE
            FALSE becomes TRUE
            If more than one are true, the result is FALSE

            Turns TRUE to FALSE and vice versa
            a!=b the same as !(a===b)
            a<b the same as !(a<b)


Common Misconceptions of Relational Expressions and Logical Operators
    have 3 objects to compare you would need to use the equality operaotr and many
    would write it like this
        a === b === c  (this will not work properly)

        the correct way to write this is to evaluate the items in pairs
        a === b && b === c (if both pairs is true the whole thing is TRUE if one pair
        is FALSE then they are both false

        Relational operators go in between PAIRS of objects.

        Logical operators go in between Relational Expressions or Boolean values.

        Always work in pairs. If you are going to do something with more than a pair
        you must bring them down into pairs


Ternaries
    are shorter, one-line ways to write a conditional statement
    requires three components
    the ternary operator is a ?

    if(condition){
        do if true;
    }else{
        do if false;
    }

    to shorten the above in a teranary operator is looks like this:
    (condition) ? do if true : do if false;
